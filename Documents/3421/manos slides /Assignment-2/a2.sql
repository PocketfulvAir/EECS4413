-- -- Add below your SQL statements.
-- -- You can create intermediate views (as needed). Remember to drop these views after you have populated the result tables.
-- -- You can use the "\i a2.sql" command in psql to execute the SQL commands in this file.
--
-- -- Query 1 statements
-- DROP VIEW IF EXISTS r1 CASCADE;
-- DROP VIEW IF EXISTS r2 CASCADE;
-- DROP VIEW IF EXISTS r3 CASCADE;
-- DROP VIEW IF EXISTS r4 CASCADE;
--
-- create view r1 as
-- select *
-- from neighbour n, country c
-- where n.country=c.cid;
--
-- create view r2 as
-- select neighbor as c1id, max(height) from r1 group by c1id;
--
-- create view r3 as
-- select * from r1,r2
-- where neighbor=c1id and height=max;
--
-- create view r4 as
-- select c1id,cname as c2name,country as c2id
-- from r3
-- order by c1id;
--
-- insert into query1 (select c1id,cname as c1name,c2id,c2name from country,r4 where c1id= cid
-- order by c1name ASC);
--
--
-- DROP VIEW IF EXISTS r1 CASCADE;
-- DROP VIEW IF EXISTS r2 CASCADE;
-- DROP VIEW IF EXISTS r3 CASCADE;
-- DROP VIEW IF EXISTS r4 CASCADE;
--
--
-- -- Query 2 statements
--
INSERT INTO query2 cid, cname
(SELECT cid,cname FROM country WHERE cid NOT IN (SELECT cid FROM oceanAccess));
SELECT * FROM query2;
--
-- -- -- Query 3 statements
-- DROP VIEW IF EXISTS q3;
-- CREATE OR REPLACE VIEW q3 AS
-- SELECT cid, cname, FROM country WHERE cid NOT IN (SELECT cid FROM oceanAccess);

-- SELECT q3.cid AS c1id, q3.cname AS c1name, country.cid AS c2id, country.cname AS c2name
--       FROM q3 JOIN neighbour ON q3.cid = neighbour.country, country GROUP BY c1id, c2id, c1name, c2name
-- HAVING count(neighbour.neighbor) = 1 ORDER BY c1name ASC;
--
--
-- -- Query 4 statements
--
-- insert into query4(
-- select c.cname, o1.oname from country c,oceanAccess o,ocean o1
-- where c.cid=o.cid and o1.oid=o.oid
-- union
-- select c.cname, o1.oname from country c,neighbour n,oceanAccess o,ocean o1
-- where c.cid = n.country and n.neighbor = o.cid  and o1.oid = o.oid
-- order by cname ASC, oname DESC);
--
--
-- Query 5 statements
-- DROP VIEW IF EXISTS q5;
--
-- CREATE OR REPLACE VIEW q5 AS
-- SELECT c.cname AS cname, c.cid AS cid, h.hdi_score AS hs, h.year
-- FROM country c LEFT JOIN hdi h ON c.cid = h.cid
-- WHERE h.year >= 2009 AND h.year <= 2013;
--
-- INSERT INTO query5 SELECT cid, cname, AVG(hs) AS avghdi
-- FROM q5
-- GROUP BY cid, cname
-- ORDER BY avghdi DESC LIMIT 10;
--
-- DROP VIEW q5;
--
-- -- Query 6 statements
-- DROP VIEW IF EXISTS y1 CASCADE;
-- DROP VIEW IF EXISTS y2 CASCADE;
-- DROP VIEW IF EXISTS y3 CASCADE;
-- DROP VIEW IF EXISTS y4 CASCADE;
-- DROP VIEW IF EXISTS y5 CASCADE;
--
-- create view y1(cid,year,hdi)as
-- select cid,year,hdi_score
-- from hdi
-- where year=2009;
--
-- create view y2(cid,year,hdi)as
-- select cid,year,hdi_score
-- from hdi
-- where year=2010;
--
-- create view y3(cid,year,hdi)as
-- select cid,year,hdi_score
-- from hdi
-- where year=2011;
--
-- create view y4(cid,year,hdi)as
-- select cid,year,hdi_score
-- from hdi
-- where year=2012;
--
-- create view y5(cid,year,hdi)as
-- select cid,year,hdi_score
-- from hdi
-- where year=2013;
--
-- insert into query6(select y1.cid, country.cname
--                     from y1,y2,y3,y4,y5,country
--                     where (y1.cid=y2.cid and
--                     y2.cid=y3.cid and y3.cid=y4.cid
--                     and y4.cid=y5.cid) and  (y5.hdi>y4.hdi and y4.hdi>y3.hdi and y3.hdi>y2.hdi and y2.hdi>y1.hdi) and y1.cid= country.cid);
--
--
-- -- Query 7 statements
-- INSERT INTO query7(SELECT a2.religion.rid, a2.religion.rname, sum(a2.country.population* a2.religion.rpercentage)
--                     AS followers from a2.country, a2.religion
--                     WHERE country.cid = religion.cid
--                     GROUP BY a2.religion.rname, a2.religion.rid
--                     ORDER BY followers DESC);
--
-- SELECT * FROM query7;
--
-- -- Query 8 statements
-- DROP VIEW IF EXISTS qq CASCADE;
--
-- CREATE VIEW qq(lname,c1name)as
-- SELECT lname, cname AS c1name
-- FROM country c, language l WHERE c.cid = l.cid;
--
-- INSERT INTO query8(SELECT q1.c1name,q2.c1name, q1.lname FROM qq q1, qq q2
--                     WHERE q1.lname=q2.lname AND q1.c1name!=q2.c1name
--                     ORDER BY q1.lname ASC, q1.c1name DESC );
--
-- -- Query 9 statements
--
-- DROP VIEW IF EXISTS a1 CASCADE;
-- CREATE VIEW a1(name,height,depth ) AS
-- SELECT c.cname,c.height,coalesce(o2.depth,0)
-- FROM country c LEFT OUTER JOIN oceanAccess o1 ON c.cid=o1.cid
-- LEFT OUTER JOIN ocean o2 ON o2.oid=o1.oid;
--
-- INSERT INTO query9(SELECT a1.name AS cname,(a1.height+a1.depth) AS totalspan FROM a1
--                    WHERE (a1.height+a1.depth) IN
--                   (SELECT Max(a1.height+a1.depth) FROM a1));
--
--
-- -- Query 10 statements
-- DROP VIEW IF EXISTS a2 CASCADE;
--
-- CREATE VIEW a2(name,length) AS
-- SELECT c.cname, sum(length)
-- FROM neighbour n, country c
-- WHERE n.country = c.cid
-- GROUP BY c.cname;
--
-- INSERT INTO query10 (SELECT name AS cname, length AS borderslength FROM a2 WHERE length IN
--                     (SELECT max(length) FROM a2));
